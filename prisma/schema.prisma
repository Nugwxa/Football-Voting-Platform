generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  startDate  DateTime
  expiryDate DateTime
}

model User {
  id               String       @id @default(uuid())
  name             String
  email            String       @unique
  isAdmin          Boolean      @default(false)
  isActive         Boolean      @default(true)
  auth             Json
  Session          Session[]
  registrationDate DateTime
  ResetToken       ResetToken[]
  Vote             Vote[]
}

enum PlayerPositions {
  Goalkeeper
  Defender
  Midfielder
  Forward
}

model Player {
  id          String          @id @default(uuid())
  key         String          @unique
  img         Json?
  firstName   String
  lastName    String
  squadNumber Int?
  position    PlayerPositions
  isActive    Boolean
  votes       Vote[]
  polls       PollPlayer[]
}

model Poll {
  id          String       @id @default(uuid())
  title       String
  description String       @db.Text()
  startDate   DateTime     @default(now())
  closingDate DateTime
  img         Json?
  votes       Vote[]
  players     PollPlayer[]
}

model Vote {
  id               String @id @default(uuid())
  pollId           String
  vote             Poll   @relation(fields: [pollId], references: [id])
  voterId          String
  selectedPlayerId String
  selectedPlayer   Player @relation(fields: [selectedPlayerId], references: [id])
  user             User   @relation(fields: [voterId], references: [id])
}

model PollPlayer {
  pollId   String
  poll     Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  playerId String
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@id([pollId, playerId])
  @@index([pollId])
  @@index([playerId])
}

model ResetToken {
  id         String   @id @default(uuid())
  userId     String
  isUsed     Boolean  @default(false)
  created    DateTime @default(now())
  expiryDate DateTime
  user       User     @relation(fields: [userId], references: [id])
}
